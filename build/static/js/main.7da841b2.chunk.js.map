{"version":3,"sources":["Components/RhymingWords.module.css","Components/WordLabel.module.css","helper/rhymeEvaluator.js","Components/WordBox.js","Components/WordLabel.js","Components/RhymingWords.js","App.js","index.js"],"names":["module","exports","consonants","vowels","openVowels","undividedConsonantPairs","determineLetterPairType","letterPair","includes","separateBySyllable","word","syllables","nextSyllable","i","length","push","letterPairType","hasPushed","console","log","WordBox","props","useState","inputValue","setInputValue","onSubmit","e","preventDefault","submitHandler","join","className","classes","maxLength","placeholder","onChange","target","value","required","WordLabel","rectangle","RhymingWords","App","wordInSyllables","setWordInSyllables","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7da841b2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"rectangle\":\"RhymingWords_rectangle__hyijZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"rectangle\":\"WordLabel_rectangle__2D6RD\"};","const consonants = [\r\n  \"b\",\r\n  \"c\",\r\n  \"d\",\r\n  \"f\",\r\n  \"g\",\r\n  \"h\",\r\n  \"j\",\r\n  \"k\",\r\n  \"l\",\r\n  \"m\",\r\n  \"n\",\r\n  \"ñ\",\r\n  \"p\",\r\n  \"q\",\r\n  \"r\",\r\n  \"s\",\r\n  \"t\",\r\n  \"v\",\r\n  \"w\",\r\n  \"x\",\r\n  \"y\",\r\n  \"z\",\r\n];\r\nconst vowels = [\"a\", \"á\", \"e\", \"é\", \"i\", \"í\", \"o\", \"ó\", \"u\", \"ú\", \"ü\"];\r\nconst openVowels = [\"a\", \"e\", \"o\", \"á\", \"é\", \"í\", \"ó\", \"ú\"];\r\nconst closedVowels = [\"i\", \"u\", \"ü\"];\r\nconst stressedVowels = [\"á\", \"é\", \"í\", \"ó\", \"ú\"];\r\nconst specialCombo = [\"gu\", \"gü\", \"qu\"];\r\nconst hybridConsonantPair = [\"ps\", \"sc\"];\r\nconst companyingConsonants = [\"l\", \"r\"];\r\nconst undividedConsonantPairs = [\r\n  \"bl\",\r\n  \"br\",\r\n  \"ch\",\r\n  \"cl\",\r\n  \"cr\",\r\n  \"dr\",\r\n  \"fl\",\r\n  \"fr\",\r\n  \"gl\",\r\n  \"gr\",\r\n  \"ll\",\r\n  \"rr\",\r\n  \"pr\",\r\n  \"pl\",\r\n  \"tl\",\r\n  \"tr\",\r\n  \"kl\",\r\n  \"kr\",\r\n];\r\n\r\nconst getLetterType = (letter) => {\r\n  if (consonants.includes(letter)) return \"consonant\";\r\n  if (openVowels.includes(letter)) return \"open vowel\";\r\n  if (closedVowels.includes(letter)) return \"closed vowel\";\r\n  if (stressedVowels.includes(letter)) return \"stressed vowel\";\r\n  return \"undefined\";\r\n};\r\n\r\nconst determineLetterPairType = (letterPair) => {\r\n  //const letterPairArr = Array.from(letterPair);\r\n  if (vowels.includes(letterPair[0])) {\r\n    if (\r\n      openVowels.includes(letterPair[0]) &&\r\n      openVowels.includes(letterPair[1])\r\n    )\r\n      return \"hiato\";\r\n\r\n    if (vowels.includes(letterPair[1])) return \"diptongo\";\r\n    if (consonants.includes(letterPair[1])) return \"vowel-consonant\";\r\n  }\r\n\r\n  if (consonants.includes(letterPair[0])) {\r\n    if (consonants.includes(letterPair[1])) return \"double-consonant\";\r\n    if (vowels.includes(letterPair[1])) return \"consonant-vowel\";\r\n  }\r\n\r\n  return \"undefined\";\r\n};\r\n\r\nconst separateByLetter = (word) => {\r\n  return Array.from(word);\r\n};\r\n\r\nconst separateBySyllable = (word) => {\r\n  let syllables = [];\r\n  let nextSyllable = \"\";\r\n  //const wordArray = Array.from(word);\r\n  for (let i = 0; i < word.length; i++) {\r\n    if (word.length === i + 1) {\r\n      syllables.push(nextSyllable + word[i]);\r\n    }\r\n\r\n    if (word.length >= i + 2) {\r\n      const letterPair = `${word[i]}${word[i + 1]}`;\r\n      let letterPairType = determineLetterPairType(letterPair);\r\n      let hasPushed = false;\r\n\r\n      if (letterPairType === \"hiato\") {\r\n        syllables.push(letterPair[0]);\r\n        continue;\r\n      }\r\n\r\n      if (letterPairType === \"double-consonant\") {\r\n        nextSyllable = letterPair;\r\n        i++;\r\n        continue;\r\n      }\r\n\r\n      if (letterPairType === \"vowel-consonant\") {\r\n        nextSyllable = nextSyllable + letterPair[0];\r\n      }\r\n\r\n      if (\r\n        letterPairType === \"consonant-vowel\" ||\r\n        letterPairType === \"diptongo\" ||\r\n        letterPairType === \"vowel-consonant\"\r\n      ) {\r\n        if (letterPairType !== \"vowel-consonant\") {\r\n          nextSyllable = nextSyllable + letterPair;\r\n          i++;\r\n\r\n          if (word.length >= i + 2) {\r\n            if (\r\n              determineLetterPairType(`${letterPair[1]}${word[i + 1]}`) ===\r\n              \"diptongo\"\r\n            ) {\r\n              nextSyllable = nextSyllable + word[i + 1];\r\n              i++;\r\n              if (\r\n                word.length >= i + 2 &&\r\n                determineLetterPairType(`${word[i]}${word[i + 1]}`) ===\r\n                  \"diptongo\"\r\n              ) {\r\n                nextSyllable = nextSyllable + word[i + 1];\r\n                i++;\r\n              }\r\n            }\r\n            if (\r\n              determineLetterPairType(`${letterPair[1]}${word[i + 1]}`) ===\r\n              \"hiato\"\r\n            ) {\r\n              syllables.push(nextSyllable);\r\n              //hasPushed = true;\r\n              nextSyllable = \"\";\r\n              continue;\r\n            }\r\n          }\r\n        }\r\n\r\n        if (i + 1 === word.length - 1) {\r\n          if (determineLetterPairType(`${word[i]}${word[i + 1]}`) === \"hiato\") {\r\n            syllables.push(nextSyllable);\r\n            syllables.push(word[i + 1]);\r\n            return syllables;\r\n          }\r\n          syllables.push(`${nextSyllable}${word[i + 1]}`);\r\n          return syllables;\r\n        }\r\n\r\n        i++;\r\n        //if (!hasPushed)\r\n        if (word.length >= i + 2) {\r\n          const letterPair = `${word[i]}${word[i + 1]}`;\r\n          let letterPairType = determineLetterPairType(letterPair);\r\n          //letterPairType==='consonant-vowel' || undividedConsonantPairs.includes(letterPair)\r\n          if (letterPairType === \"double-consonant\") {\r\n            //i++;\r\n            if (word.length >= i + 3) {\r\n              if (\r\n                vowels.includes(word[i + 2]) &&\r\n                !undividedConsonantPairs.includes(letterPair)\r\n              ) {\r\n                nextSyllable = nextSyllable + letterPair[0];\r\n                syllables.push(nextSyllable);\r\n                hasPushed = true;\r\n              }\r\n              if (\r\n                consonants.includes(word[i + 2]) &&\r\n                !undividedConsonantPairs.includes(\r\n                  `${letterPair[1]}${word[i + 2]}`\r\n                )\r\n              ) {\r\n                nextSyllable = nextSyllable + letterPair;\r\n                syllables.push(nextSyllable);\r\n                hasPushed = true;\r\n                i++;\r\n              }\r\n              if (\r\n                consonants.includes(word[i + 2]) &&\r\n                undividedConsonantPairs.includes(\r\n                  `${letterPair[1]}${word[i + 2]}`\r\n                )\r\n              ) {\r\n                nextSyllable = nextSyllable + letterPair[0];\r\n                syllables.push(nextSyllable);\r\n                hasPushed = true;\r\n              }\r\n            } else {\r\n              //There is no word in spanish that ends with 2 consonants. Check for more exceptions...\r\n              console.log(\"incorrect word\");\r\n              return [];\r\n            }\r\n          }\r\n        }\r\n\r\n        if (!hasPushed) {\r\n          syllables.push(nextSyllable);\r\n          i--;\r\n        }\r\n      }\r\n    }\r\n    nextSyllable = \"\";\r\n  }\r\n  //syllables.push(nextSyllable);\r\n  return syllables;\r\n};\r\n\r\nexport const getSyllablesSeparated = (word) => {\r\n  const wordArr = separateBySyllable(word);\r\n  return wordArr.join(\"-\");\r\n};\r\n\r\n// const word = \"aábcdeéfghiíjklmnñoópqrstuúúvwxyz@AÁ\";\r\n\r\n// let arr = Array.from(word);\r\n// arr.forEach((letter) => console.log(letter, getLetterType(letter)));\r\n\r\n// let arr = [\"la\", \"al\", \"ll\", \"aé\", \"éa\", \"íu\", \"úi\", \"ps\"];\r\n\r\n// arr.forEach((pair) => console.log(pair + \" - \", determineLetterPairType(pair)));\r\n\r\nlet syllables = separateBySyllable(\"quiero\");\r\n\r\nconsole.log(syllables);\r\n\r\nconst doWordsRhyme = (word1, word2) => {};\r\n","import classes from \"./WordBox.module.css\";\r\nimport { useRef, useState } from \"react\";\r\nimport { getSyllablesSeparated } from \"../helper/rhymeEvaluator\";\r\n\r\nfunction WordBox(props) {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const [wordInSyllables, setWordInSyllables] = useState(\"\");\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    props.submitHandler(getSyllablesSeparated(inputValue));\r\n    setInputValue(\"\");\r\n  };\r\n\r\n  const changeInputValue = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={submitHandler}>\r\n      <input\r\n        className={classes}\r\n        maxLength={33}\r\n        placeholder=\"Digite una palabra\"\r\n        onChange={changeInputValue}\r\n        value={inputValue}\r\n        required\r\n      ></input>\r\n    </form>\r\n  );\r\n}\r\nexport default WordBox;\r\n","import classes from \"./WordLabel.module.css\";\r\n\r\nfunction WordLabel(props) {\r\n  return <div className={classes.rectangle}>{props.word}</div>;\r\n}\r\n\r\nexport default WordLabel;\r\n","import classes from \"./RhymingWords.module.css\";\r\nimport WordLabel from \"./WordLabel\";\r\nimport { Fragment, React } from \"react\";\r\n\r\nfunction RhymingWords(props) {\r\n  const wordList = (theWordList) => {\r\n    return (\r\n      <Fragment>\r\n        {theWordList.map((word, index) => (\r\n          <WordLabel word={word} key={index}></WordLabel>\r\n        ))}\r\n      </Fragment>\r\n    );\r\n  };\r\n\r\n  return <div className={classes.rectangle}>{wordList(props.wordList)}</div>;\r\n}\r\n\r\nexport default RhymingWords;\r\n","import WordBox from \"./Components/WordBox\";\nimport RhymingWords from \"./Components/RhymingWords\";\nimport WordLabel from \"./Components/WordLabel\";\nimport classes from \"./App.module.css\";\nimport { useState } from \"react\";\n\nfunction App() {\n  const [wordInSyllables, setWordInSyllables] = useState(\"\");\n  const DUMMY_WORDS = [\n    \"zorra\",\n    \"porra\",\n    \"corra\",\n    \"chorra\",\n    \"borra\",\n    \"lorra\",\n    \"ñorra\",\n  ];\n\n  const showWordInSyllable = (word) => {\n    setWordInSyllables(word);\n  };\n  return (\n    <div className={classes}>\n      <div>\n        <WordBox submitHandler={showWordInSyllable}></WordBox>\n      </div>\n      <div>\n        <WordLabel word={wordInSyllables}></WordLabel>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}