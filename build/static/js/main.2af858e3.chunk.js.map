{"version":3,"sources":["Components/RhymingWords.module.css","Components/WordLabel.module.css","helper/rhymeEvaluator.js","Components/WordBox.js","Components/WordLabel.js","Components/RhymingWords.js","App.js","index.js"],"names":["module","exports","consonants","vowels","openVowels","stressedVowels","undividedConsonantPairs","determineLetterPairType","letterPair","includes","separateBySyllable","word","toLowerCase","syllables","nextSyllable","i","length","push","letterPairType","hasPushed","replace","toUpperCase","determineAccent","wordType","accentPosition","wordSyllables","some","syllable","Array","from","letter","getSyllableFromStrongVowel","syllableNature","determineSyllableNature","slice","j","getVowelsFromSyllable","syllableVowels","replaceStressedVowel","transformWordToPhonetism","replaceAll","vowel","WordBox","props","useState","inputValue","setInputValue","onSubmit","e","preventDefault","submitHandler","join","clearWord","className","classes","maxLength","placeholder","onChange","target","value","trim","onChangeInput","required","WordLabel","rectangle","RhymingWords","App","wordInSyllables","setWordInSyllables","setWordType","lyricism","setLyricism","word1","setWord1","word2","setWord2","showLyricismOfWords","word1LyricalSyllables","word2LyricalSyllables","word1LyricalVowels","map","word2LyricalVowels","every","vowelsFromSyllable","determineLyricism","Fragment","theWordType","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2af858e3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"rectangle\":\"RhymingWords_rectangle__hyijZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"rectangle\":\"WordLabel_rectangle__2D6RD\"};","const consonants = [\r\n  \"b\",\r\n  \"c\",\r\n  \"d\",\r\n  \"f\",\r\n  \"g\",\r\n  \"h\",\r\n  \"j\",\r\n  \"k\",\r\n  \"l\",\r\n  \"m\",\r\n  \"n\",\r\n  \"ñ\",\r\n  \"p\",\r\n  \"q\",\r\n  \"r\",\r\n  \"s\",\r\n  \"t\",\r\n  \"v\",\r\n  \"w\",\r\n  \"x\",\r\n  \"y\",\r\n  \"z\",\r\n];\r\nconst vowels = [\"a\", \"á\", \"e\", \"é\", \"i\", \"í\", \"o\", \"ó\", \"u\", \"ú\", \"ü\"];\r\nconst openVowels = [\"a\", \"e\", \"o\", \"á\", \"é\", \"í\", \"ó\", \"ú\"];\r\nconst closedVowels = [\"i\", \"u\", \"ü\"];\r\nconst stressedVowels = [\"á\", \"é\", \"í\", \"ó\", \"ú\"];\r\nconst specialCombo = [\"gu\", \"gü\", \"qu\"];\r\nconst undividedConsonantPairs = [\r\n  \"bl\",\r\n  \"br\",\r\n  \"ch\",\r\n  \"cl\",\r\n  \"cr\",\r\n  \"dr\",\r\n  \"fl\",\r\n  \"fr\",\r\n  \"gl\",\r\n  \"gr\",\r\n  \"ll\",\r\n  \"rr\",\r\n  \"pr\",\r\n  \"pl\",\r\n  \"tl\",\r\n  \"tr\",\r\n  \"kl\",\r\n  \"kr\",\r\n];\r\n\r\nconst getLetterType = (letter) => {\r\n  if (consonants.includes(letter)) return \"consonant\";\r\n  if (openVowels.includes(letter)) return \"open vowel\";\r\n  if (closedVowels.includes(letter)) return \"closed vowel\";\r\n  if (stressedVowels.includes(letter)) return \"stressed vowel\";\r\n  return \"undefined\";\r\n};\r\n\r\nconst determineLetterPairType = (letterPair) => {\r\n  //const letterPairArr = Array.from(letterPair);\r\n  if (vowels.includes(letterPair[0])) {\r\n    if (\r\n      openVowels.includes(letterPair[0]) &&\r\n      openVowels.includes(letterPair[1])\r\n    )\r\n      return \"hiato\";\r\n\r\n    if (vowels.includes(letterPair[1])) return \"diptongo\";\r\n    if (consonants.includes(letterPair[1])) return \"vowel-consonant\";\r\n  }\r\n\r\n  if (consonants.includes(letterPair[0])) {\r\n    if (consonants.includes(letterPair[1])) return \"double-consonant\";\r\n    if (vowels.includes(letterPair[1])) return \"consonant-vowel\";\r\n  }\r\n\r\n  return \"undefined\";\r\n};\r\n\r\nconst separateBySyllable = (word) => {\r\n  word = word.toLowerCase();\r\n\r\n  //word = transformWordToPhonetism(word);\r\n\r\n  let syllables = [];\r\n  let nextSyllable = \"\"; //Has the next syllable that is being buildt\r\n  //const wordArray = Array.from(word);\r\n  for (let i = 0; i < word.length; i++) {\r\n    if (word.length === i + 1) {\r\n      syllables.push(nextSyllable + word[i]);\r\n    }\r\n\r\n    if (word.length >= i + 2) {\r\n      const letterPair = `${word[i]}${word[i + 1]}`;\r\n      let letterPairType = determineLetterPairType(letterPair);\r\n      let hasPushed = false;\r\n\r\n      if (letterPairType === \"hiato\") {\r\n        //hiato must be separated\r\n        nextSyllable += letterPair[0];\r\n        syllables.push(nextSyllable);\r\n        nextSyllable = \"\";\r\n        continue;\r\n      }\r\n\r\n      if (letterPairType === \"double-consonant\") {\r\n        //a syllable starting with double consonants\r\n        nextSyllable = letterPair;\r\n        i++;\r\n        continue;\r\n      }\r\n\r\n      if (letterPairType === \"vowel-consonant\") {\r\n        //vowel-consonant can be the start of a syllable or not\r\n        nextSyllable = nextSyllable + letterPair[0];\r\n      }\r\n\r\n      if (\r\n        letterPairType === \"consonant-vowel\" ||\r\n        letterPairType === \"diptongo\" ||\r\n        letterPairType === \"vowel-consonant\"\r\n      ) {\r\n        if (letterPairType !== \"vowel-consonant\") {\r\n          nextSyllable = nextSyllable + letterPair;\r\n          i++;\r\n\r\n          if (word.length >= i + 2) {\r\n            if (\r\n              determineLetterPairType(`${letterPair[1]}${word[i + 1]}`) ===\r\n              \"diptongo\" //a diptongo is always in the same syllable\r\n            ) {\r\n              nextSyllable = nextSyllable + word[i + 1];\r\n              i++;\r\n              if (\r\n                word.length >= i + 2 &&\r\n                determineLetterPairType(`${word[i]}${word[i + 1]}`) ===\r\n                  \"diptongo\" //a diptongo can be followed by another diptongo, forming a triptongo\r\n              ) {\r\n                nextSyllable = nextSyllable + word[i + 1];\r\n                i++;\r\n              }\r\n            }\r\n            if (\r\n              determineLetterPairType(`${letterPair[1]}${word[i + 1]}`) ===\r\n              \"hiato\" //hiato is separated\r\n            ) {\r\n              syllables.push(nextSyllable);\r\n              //hasPushed = true;\r\n              nextSyllable = \"\";\r\n              continue;\r\n            }\r\n          }\r\n        }\r\n\r\n        if (i + 1 === word.length - 1) {\r\n          //what to do if next letter is the last\r\n          if (determineLetterPairType(`${word[i]}${word[i + 1]}`) === \"hiato\") {\r\n            //separate hiato\r\n            syllables.push(nextSyllable);\r\n            syllables.push(word[i + 1]);\r\n            //return syllables;\r\n            break;\r\n          }\r\n          syllables.push(`${nextSyllable}${word[i + 1]}`);\r\n          //return syllables;\r\n          break;\r\n        }\r\n\r\n        i++;\r\n        //if (!hasPushed)\r\n        if (word.length >= i + 2) {\r\n          const letterPair = `${word[i]}${word[i + 1]}`;\r\n          let letterPairType = determineLetterPairType(letterPair);\r\n          //letterPairType==='consonant-vowel' || undividedConsonantPairs.includes(letterPair)\r\n          if (letterPairType === \"double-consonant\") {\r\n            //Decision to make if next pair of letters is doble-consonant\r\n            //i++;\r\n            if (word.length >= i + 3) {\r\n              //it depends on the letter that is right after and wether the double-consonant is undivided or not\r\n              if (\r\n                vowels.includes(word[i + 2]) &&\r\n                !undividedConsonantPairs.includes(letterPair)\r\n              ) {\r\n                nextSyllable = nextSyllable + letterPair[0];\r\n                syllables.push(nextSyllable);\r\n                hasPushed = true;\r\n              }\r\n              if (\r\n                consonants.includes(word[i + 2]) &&\r\n                !undividedConsonantPairs.includes(\r\n                  `${letterPair[1]}${word[i + 2]}`\r\n                )\r\n              ) {\r\n                nextSyllable = nextSyllable + letterPair;\r\n                syllables.push(nextSyllable);\r\n                hasPushed = true;\r\n                i++;\r\n              }\r\n              if (\r\n                consonants.includes(word[i + 2]) &&\r\n                undividedConsonantPairs.includes(\r\n                  `${letterPair[1]}${word[i + 2]}`\r\n                )\r\n              ) {\r\n                nextSyllable = nextSyllable + letterPair[0];\r\n                syllables.push(nextSyllable);\r\n                hasPushed = true;\r\n              }\r\n            } else {\r\n              //There is no word in spanish that ends with 2 consonants. Check for more exceptions...\r\n              //console.log(\"incorrect word\");\r\n              //return [];\r\n              //console.log(letterPair);\r\n              nextSyllable = nextSyllable + letterPair;\r\n              syllables.push(nextSyllable);\r\n              hasPushed = true;\r\n              i++;\r\n            }\r\n          }\r\n        }\r\n\r\n        if (!hasPushed) {\r\n          syllables.push(nextSyllable);\r\n          i--;\r\n        }\r\n      }\r\n    }\r\n    nextSyllable = \"\";\r\n  }\r\n\r\n  //Change first character to upper case\r\n  syllables[0] = syllables[0].replace(\r\n    syllables[0][0],\r\n    syllables[0][0].toUpperCase()\r\n  );\r\n\r\n  return syllables;\r\n};\r\n\r\nexport const determineAccent = (word) => {\r\n  let wordType;\r\n  const wordSyllables = separateBySyllable(word);\r\n  let accentPosition;\r\n\r\n  if (wordSyllables.length === 1) {\r\n    accentPosition = 0;\r\n    wordType = \"aguda\";\r\n  } else {\r\n    const hasAccentMark = wordSyllables.some((syllable, i) => {\r\n      const foundAccent = Array.from(syllable).some((letter) => {\r\n        if (stressedVowels.includes(letter)) {\r\n          accentPosition = i;\r\n          return true;\r\n        } else return false;\r\n      });\r\n      if (foundAccent) return true;\r\n      else return false;\r\n    });\r\n\r\n    if (hasAccentMark) {\r\n      if (accentPosition === wordSyllables.length - 1) wordType = \"aguda\";\r\n      if (accentPosition === wordSyllables.length - 2) wordType = \"grave\";\r\n      if (accentPosition === wordSyllables.length - 3) wordType = \"esdrújula\";\r\n      if (accentPosition < wordSyllables.length - 3) wordType = \"sobresdrújula\";\r\n    } else {\r\n      if (\r\n        word[word.length - 1] === \"n\" ||\r\n        word[word.length - 1] === \"s\" ||\r\n        vowels.includes(word[word.length - 1])\r\n      ) {\r\n        wordType = \"grave\";\r\n        accentPosition = wordSyllables.length - 2;\r\n      } else {\r\n        wordType = \"aguda\";\r\n        accentPosition = wordSyllables.length - 1;\r\n      }\r\n    }\r\n  }\r\n\r\n  return [wordType, accentPosition];\r\n};\r\n\r\nconst determineSyllableNature = (syllable) => {\r\n  syllable = syllable.toLowerCase();\r\n  for (let i = 0; i < syllable.length; i++) {\r\n    if (vowels.includes(syllable[i])) {\r\n      if (i === syllable.length - 1 || consonants.includes(syllable[i + 1]))\r\n        return \"cima-simple\";\r\n      if (\r\n        i + 2 < syllable.length &&\r\n        vowels.includes(syllable[i + 1]) &&\r\n        vowels.includes(syllable[i + 2])\r\n      )\r\n        return \"triptongo\";\r\n      if (openVowels.includes(syllable[i])) return \"diptongo-decreciente\";\r\n      return \"diptongo-creciente\";\r\n    }\r\n  }\r\n  return \"undefined\";\r\n};\r\n\r\nconst getSyllableFromStrongVowel = (syllable) => {\r\n  syllable = syllable.toLowerCase();\r\n  const syllableNature = determineSyllableNature(syllable);\r\n  for (let i = 0; i < syllable.length; i++) {\r\n    if (vowels.includes(syllable[i])) {\r\n      //console.log(syllable.slice(i), syllableNature);\r\n      if (\r\n        syllableNature === \"cima-simple\" ||\r\n        syllableNature === \"diptongo-decreciente\"\r\n      )\r\n        return syllable.slice(i);\r\n      if (syllableNature === \"diptongo-creciente\") return syllable.slice(i + 1);\r\n      if (syllableNature === \"triptongo\") {\r\n        for (let j = i; j < 3; j++) {\r\n          if (openVowels.includes(syllable[j])) return syllable.slice(j);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return \"\";\r\n};\r\n\r\nconst getVowelsFromSyllable = (syllable) => {\r\n  syllable = syllable.toLowerCase();\r\n  let syllableVowels = \"\";\r\n  for (let i = 0; i < syllable.length; i++) {\r\n    if (vowels.includes(syllable[i])) {\r\n      if (stressedVowels.includes(syllable[i])) {\r\n        syllableVowels += replaceStressedVowel(syllable[i]); //replace stressed vowel with the non stressed vowel\r\n      } else {\r\n        syllableVowels += syllable[i];\r\n      }\r\n    }\r\n  }\r\n  return syllableVowels;\r\n};\r\n\r\nexport const getSyllablesSeparated = (word) => {\r\n  const wordArr = separateBySyllable(word);\r\n  return wordArr.join(\"-\");\r\n};\r\n\r\n//alteration of orthography for easier comparisson of lyricism\r\nconst transformWordToPhonetism = (word) => {\r\n  word = word.toLowerCase();\r\n  word = word\r\n    .replaceAll(\"z\", \"s\")\r\n    .replaceAll(\"x\", \"ks\")\r\n    .replaceAll(\"ce\", \"se\")\r\n    .replaceAll(\"ci\", \"si\")\r\n    .replaceAll(\"cé\", \"sé\")\r\n    .replaceAll(\"cí\", \"sí\")\r\n    .replaceAll(\"ss\", \"s\")\r\n    .replaceAll(\"ch\", \"x\") //auxiliar substitution\r\n    .replaceAll(\"h\", \"\") //this is done to eliminate muted 'h'\r\n    .replaceAll(\"c\", \"k\")\r\n    .replaceAll(\"x\", \"ch\") //restore 'ch'\r\n    .replaceAll(\"que\", \"ke\")\r\n    .replaceAll(\"qué\", \"ké\")\r\n    .replaceAll(\"qui\", \"ki\")\r\n    .replaceAll(\"quí\", \"kí\")\r\n    .replaceAll(\"q\", \"k\")\r\n    .replaceAll(\"v\", \"b\")\r\n    .replaceAll(\"nb\", \"mb\")\r\n    .replaceAll(\"ge\", \"je\")\r\n    .replaceAll(\"gi\", \"ji\")\r\n    .replaceAll(\"gé\", \"jé\")\r\n    .replaceAll(\"gí\", \"jí\")\r\n    .replaceAll(\"gue\", \"ge\")\r\n    .replaceAll(\"gui\", \"gi\")\r\n    .replaceAll(\"gué\", \"gé\")\r\n    .replaceAll(\"guí\", \"gí\")\r\n    .replaceAll(\"ü\", \"u\")\r\n    .replaceAll(\"ll\", \"y\")\r\n    .replaceAll(\"w\", \"u\");\r\n\r\n  return word;\r\n};\r\n\r\nconst replaceStressedVowel = (vowel) => {\r\n  if (vowel === \"á\") return \"a\";\r\n  if (vowel === \"é\") return \"e\";\r\n  if (vowel === \"í\") return \"i\";\r\n  if (vowel === \"ó\") return \"o\";\r\n  if (vowel === \"ú\") return \"u\";\r\n};\r\n\r\nexport const determineLyricism = (word1, word2) => {\r\n  if (determineAccent(word1)[0] === determineAccent(word2)[0]) {\r\n    //\r\n    word1 = transformWordToPhonetism(word1);\r\n    word2 = transformWordToPhonetism(word2);\r\n\r\n    const word1LyricalSyllables = separateBySyllable(word1).slice(\r\n      determineAccent(word1)[1]\r\n    );\r\n    const word2LyricalSyllables = separateBySyllable(word2).slice(\r\n      determineAccent(word2)[1]\r\n    );\r\n    if (\r\n      //Determine if there is a perfect rhyme\r\n      word1LyricalSyllables.join(\"\").toLowerCase() ===\r\n      word2LyricalSyllables.join(\"\").toLowerCase()\r\n    )\r\n      return \"Rima perfecta\";\r\n    else {\r\n      // if there is no perfect rhyme\r\n      //console.log(word1LyricalSyllables);\r\n      word1LyricalSyllables[0] = getSyllableFromStrongVowel(\r\n        word1LyricalSyllables[0]\r\n      );\r\n      word2LyricalSyllables[0] = getSyllableFromStrongVowel(\r\n        word2LyricalSyllables[0]\r\n      );\r\n      //console.log(word1LyricalSyllables, word2LyricalSyllables);\r\n      if (\r\n        word1LyricalSyllables.join(\"\").toLowerCase() ===\r\n        word2LyricalSyllables.join(\"\").toLowerCase()\r\n      )\r\n        // if words are the same except the consonants before vowels of the first syllables, from the lyrical syllables\r\n        return \"Rima regular\";\r\n      else {\r\n        // Rima vaga if only the vowels of the lyrical syllables are the same, without taking into account the consonants of the first syllables nor wether they are stressed or not\r\n        const word1LyricalVowels = word1LyricalSyllables.map((syllable) =>\r\n          getVowelsFromSyllable(syllable)\r\n        );\r\n        const word2LyricalVowels = word2LyricalSyllables.map((syllable) =>\r\n          getVowelsFromSyllable(syllable)\r\n        );\r\n        if (\r\n          word1LyricalVowels.every(\r\n            (vowelsFromSyllable, i) =>\r\n              vowelsFromSyllable === word2LyricalVowels[i]\r\n          )\r\n        )\r\n          return \"Rima vaga\";\r\n      }\r\n    }\r\n  }\r\n  return \"No rima\";\r\n};\r\n","import classes from \"./WordBox.module.css\";\r\nimport { useRef, useState } from \"react\";\r\nimport {\r\n  getSyllablesSeparated,\r\n  determineAccent,\r\n} from \"../helper/rhymeEvaluator\";\r\n\r\nfunction WordBox(props) {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const [wordInSyllables, setWordInSyllables] = useState(\"\");\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    props.submitHandler(\r\n      getSyllablesSeparated(inputValue),\r\n      determineAccent(inputValue)[0]\r\n    );\r\n    if (props.clearWord) setInputValue(\"\");\r\n  };\r\n\r\n  const changeInputValue = (e) => {\r\n    setInputValue(e.target.value.trim());\r\n    props.onChangeInput?.(e.target.value.trim());\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={submitHandler}>\r\n      <input\r\n        className={classes}\r\n        maxLength={33}\r\n        placeholder=\"Digite una palabra\"\r\n        onChange={changeInputValue}\r\n        value={inputValue}\r\n        required\r\n      ></input>\r\n    </form>\r\n  );\r\n}\r\nexport default WordBox;\r\n","import classes from \"./WordLabel.module.css\";\r\n\r\nfunction WordLabel(props) {\r\n  return <div className={classes.rectangle}>{props.word}</div>;\r\n}\r\n\r\nexport default WordLabel;\r\n","import classes from \"./RhymingWords.module.css\";\r\nimport WordLabel from \"./WordLabel\";\r\nimport { Fragment, React } from \"react\";\r\n\r\nfunction RhymingWords(props) {\r\n  const wordList = (theWordList) => {\r\n    return (\r\n      <Fragment>\r\n        {theWordList.map((word, index) => (\r\n          <WordLabel word={word} key={index}></WordLabel>\r\n        ))}\r\n      </Fragment>\r\n    );\r\n  };\r\n\r\n  return <div className={classes.rectangle}>{wordList(props.wordList)}</div>;\r\n}\r\n\r\nexport default RhymingWords;\r\n","import WordBox from \"./Components/WordBox\";\nimport RhymingWords from \"./Components/RhymingWords\";\nimport WordLabel from \"./Components/WordLabel\";\nimport classes from \"./App.module.css\";\nimport React, { useState } from \"react\";\nimport { determineLyricism } from \"../src/helper/rhymeEvaluator\";\n\nfunction App() {\n  const [wordInSyllables, setWordInSyllables] = useState(\"\");\n  const [wordType, setWordType] = useState(\"\");\n  const [lyricism, setLyricism] = useState(\"\");\n  const [word1, setWord1] = useState(\"\");\n  const [word2, setWord2] = useState(\"\");\n  const DUMMY_WORDS = [\n    \"zorra\",\n    \"porra\",\n    \"corra\",\n    \"chorra\",\n    \"borra\",\n    \"lorra\",\n    \"ñorra\",\n  ];\n\n  const showWordInSyllableAndType = (word, theWordType) => {\n    setWordInSyllables(word);\n    setWordType(theWordType);\n  };\n\n  const showLyricismOfWords = () => {\n    setLyricism(determineLyricism(word1, word2));\n  };\n\n  return (\n    <React.Fragment>\n      <div className={classes}>\n        <div>\n          <WordBox\n            submitHandler={showWordInSyllableAndType}\n            clearWord={true}\n          ></WordBox>\n        </div>\n        <div>\n          <WordLabel word={wordInSyllables}></WordLabel>\n          <WordLabel word={wordType}></WordLabel>\n        </div>\n      </div>\n\n      <div className={classes}>\n        <div>\n          <WordBox\n            submitHandler={showLyricismOfWords}\n            onChangeInput={(value) => {\n              setWord1(value);\n            }}\n          ></WordBox>\n        </div>\n        <div>\n          <WordBox\n            submitHandler={showLyricismOfWords}\n            onChangeInput={(value) => {\n              setWord2(value);\n            }}\n          ></WordBox>\n        </div>\n\n        <div>\n          <WordLabel word={lyricism}></WordLabel>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}